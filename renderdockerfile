# PostgreSQL Service
FROM postgres:15 as postgres

ENV POSTGRES_USER=${DB_USER:-postgres}
ENV POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
ENV POSTGRES_DB=${DB_NAME:-myapp_db}

# Build stage backend
FROM node:20-alpine as builder
WORKDIR /app/backend
# Create uploads directory with proper permissions
RUN mkdir -p /app/backend/uploads && \
    chmod 777 /app/backend/uploads

# Create assets directory with proper permissions
RUN mkdir -p /app/backend/assets && \
    chmod 777 /app/backend/assets

COPY Backend/package*.json ./
RUN npm install
COPY Backend/ .
RUN npm run build

# Production stage
FROM node:20-alpine
WORKDIR /app/backend
COPY Backend/package*.json ./
RUN npm install --production
COPY --from=builder /app/backend/dist ./dist
COPY --from=builder /app/backend/node_modules ./node_modules
COPY --from=builder /app/backend/uploads ./uploads
COPY --from=builder /app/backend/assets ./assets

EXPOSE 8080
CMD ["sh","-c","chmod 777 /app/uploads && chmod 777 /app/assets && node run dist/index.js"]

# Frontend Service
FROM node:18 as frontend-build
WORKDIR /app/frontend
COPY Frontend/package*.json ./
RUN npm install
COPY Frontend/ .
RUN npm run build

FROM nginx:alpine as frontend
COPY --from=frontend-build /app/frontend/dist /usr/share/nginx/html
COPY Frontend/nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 5151
CMD ["nginx", "-g", "daemon off;"]